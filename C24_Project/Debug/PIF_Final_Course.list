
PIF_Final_Course.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003940  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa8  08003aa8  00020638  2**0
                  CONTENTS
  4 .ARM          00000000  08003aa8  08003aa8  00020638  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aa8  08003aa8  00020638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000638  20000000  08003ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  20000638  080040e8  00020638  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b88  080040e8  00020b88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020638  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020661  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc43  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e77  00000000  00000000  0002c2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0002e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089f  00000000  00000000  0002ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c5a  00000000  00000000  0002f507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e88c  00000000  00000000  00047161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008950d  00000000  00000000  000559ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d04  00000000  00000000  000deefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000e1c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000638 	.word	0x20000638
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a34 	.word	0x08003a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000063c 	.word	0x2000063c
 8000148:	08003a34 	.word	0x08003a34

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Display_by_Solenoid>:
		'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
		'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '[', '\\', ']', '^', '_'};

void
Display_by_Solenoid (int* output)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if (output[0] == 0)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d104      	bne.n	8000176 <Display_by_Solenoid+0x1a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800016c:	2201      	movs	r2, #1
 800016e:	2102      	movs	r1, #2
 8000170:	481d      	ldr	r0, [pc, #116]	; (80001e8 <Display_by_Solenoid+0x8c>)
 8000172:	f001 fd2f 	bl	8001bd4 <HAL_GPIO_WritePin>
	}

	if (output[1] == 0)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3304      	adds	r3, #4
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d104      	bne.n	800018a <Display_by_Solenoid+0x2e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	2120      	movs	r1, #32
 8000184:	4818      	ldr	r0, [pc, #96]	; (80001e8 <Display_by_Solenoid+0x8c>)
 8000186:	f001 fd25 	bl	8001bd4 <HAL_GPIO_WritePin>
	}

	if (output[2] == 0)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	3308      	adds	r3, #8
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d105      	bne.n	80001a0 <Display_by_Solenoid+0x44>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800019a:	4813      	ldr	r0, [pc, #76]	; (80001e8 <Display_by_Solenoid+0x8c>)
 800019c:	f001 fd1a 	bl	8001bd4 <HAL_GPIO_WritePin>
	}

	if (output[3] == 0)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	330c      	adds	r3, #12
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d104      	bne.n	80001b4 <Display_by_Solenoid+0x58>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80001aa:	2201      	movs	r2, #1
 80001ac:	2110      	movs	r1, #16
 80001ae:	480e      	ldr	r0, [pc, #56]	; (80001e8 <Display_by_Solenoid+0x8c>)
 80001b0:	f001 fd10 	bl	8001bd4 <HAL_GPIO_WritePin>
	}

	if (output[4] == 0)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3310      	adds	r3, #16
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d105      	bne.n	80001ca <Display_by_Solenoid+0x6e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,1);
 80001be:	2201      	movs	r2, #1
 80001c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c4:	4808      	ldr	r0, [pc, #32]	; (80001e8 <Display_by_Solenoid+0x8c>)
 80001c6:	f001 fd05 	bl	8001bd4 <HAL_GPIO_WritePin>
	}

	if (output[5] == 0)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	3314      	adds	r3, #20
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d105      	bne.n	80001e0 <Display_by_Solenoid+0x84>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001da:	4804      	ldr	r0, [pc, #16]	; (80001ec <Display_by_Solenoid+0x90>)
 80001dc:	f001 fcfa 	bl	8001bd4 <HAL_GPIO_WritePin>
	}

}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	40010c00 	.word	0x40010c00
 80001ec:	40010800 	.word	0x40010800

080001f0 <Capital_Letter>:


void
Capital_Letter ()
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5, 1);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2120      	movs	r1, #32
 80001f8:	4805      	ldr	r0, [pc, #20]	; (8000210 <Capital_Letter+0x20>)
 80001fa:	f001 fceb 	bl	8001bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_12, 1);
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <Capital_Letter+0x24>)
 8000206:	f001 fce5 	bl	8001bd4 <HAL_GPIO_WritePin>
	//HAL_Delay(1000);
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40010c00 	.word	0x40010c00
 8000214:	40010800 	.word	0x40010800

08000218 <number>:

void
number ()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1,1);
 800021c:	2201      	movs	r2, #1
 800021e:	2102      	movs	r1, #2
 8000220:	4805      	ldr	r0, [pc, #20]	; (8000238 <number+0x20>)
 8000222:	f001 fcd7 	bl	8001bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_10,1);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022c:	4802      	ldr	r0, [pc, #8]	; (8000238 <number+0x20>)
 800022e:	f001 fcd1 	bl	8001bd4 <HAL_GPIO_WritePin>
	//HAL_Delay(1000);
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40010c00 	.word	0x40010c00

0800023c <chuyen>:

void
chuyen ()
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1,0);
 8000240:	2200      	movs	r2, #0
 8000242:	2102      	movs	r1, #2
 8000244:	4810      	ldr	r0, [pc, #64]	; (8000288 <chuyen+0x4c>)
 8000246:	f001 fcc5 	bl	8001bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_5,0);
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	480e      	ldr	r0, [pc, #56]	; (8000288 <chuyen+0x4c>)
 8000250:	f001 fcc0 	bl	8001bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_10,0);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025a:	480b      	ldr	r0, [pc, #44]	; (8000288 <chuyen+0x4c>)
 800025c:	f001 fcba 	bl	8001bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_4,0);
 8000260:	2200      	movs	r2, #0
 8000262:	2110      	movs	r1, #16
 8000264:	4808      	ldr	r0, [pc, #32]	; (8000288 <chuyen+0x4c>)
 8000266:	f001 fcb5 	bl	8001bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_11,0);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000270:	4805      	ldr	r0, [pc, #20]	; (8000288 <chuyen+0x4c>)
 8000272:	f001 fcaf 	bl	8001bd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_12,0);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <chuyen+0x50>)
 800027e:	f001 fca9 	bl	8001bd4 <HAL_GPIO_WritePin>
	//HAL_Delay(50);
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40010c00 	.word	0x40010c00
 800028c:	40010800 	.word	0x40010800

08000290 <HAL_GPIO_EXTI_Callback>:
uint8_t is_debounced2 = 1;
uint32_t debounce_timer2 = 0;

void
HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	//saving data
	if(GPIO_Pin == GPIO_PIN_5)
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	2b20      	cmp	r3, #32
 800029e:	d108      	bne.n	80002b2 <HAL_GPIO_EXTI_Callback+0x22>
	{
		//if(state_send == 2) state_send = 0;
		//else state_send +=1;
		is_debounced2 = 0;
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
		debounce_timer2 = HAL_GetTick();
 80002a6:	f000 fdd5 	bl	8000e54 <HAL_GetTick>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a09      	ldr	r2, [pc, #36]	; (80002d4 <HAL_GPIO_EXTI_Callback+0x44>)
 80002ae:	6013      	str	r3, [r2, #0]
		//if(state_pause == 2) state_pause = 0;
		//else state_pause +=1;
		is_debounced1 = 0;
		debounce_timer1 = HAL_GetTick();
	}
}
 80002b0:	e00a      	b.n	80002c8 <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == GPIO_PIN_0)
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d107      	bne.n	80002c8 <HAL_GPIO_EXTI_Callback+0x38>
		is_debounced1 = 0;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <HAL_GPIO_EXTI_Callback+0x48>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]
		debounce_timer1 = HAL_GetTick();
 80002be:	f000 fdc9 	bl	8000e54 <HAL_GetTick>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a05      	ldr	r2, [pc, #20]	; (80002dc <HAL_GPIO_EXTI_Callback+0x4c>)
 80002c6:	6013      	str	r3, [r2, #0]
}
 80002c8:	bf00      	nop
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000628 	.word	0x20000628
 80002d4:	20000b80 	.word	0x20000b80
 80002d8:	20000627 	.word	0x20000627
 80002dc:	20000b7c 	.word	0x20000b7c

080002e0 <HAL_UART_RxCpltCallback>:

void
HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (&huart2, UART1_rxBuffer, 12);
 80002e8:	220c      	movs	r2, #12
 80002ea:	4904      	ldr	r1, [pc, #16]	; (80002fc <HAL_UART_RxCpltCallback+0x1c>)
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <HAL_UART_RxCpltCallback+0x20>)
 80002ee:	f002 fef0 	bl	80030d2 <HAL_UART_Receive_DMA>
				status1 +=Rx_Buf;
				status +=Rx_Buf;
			}
			HAL_UART_Receive_IT(&huart1,&Rx_Buf,1);
		  }*/
}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000770 	.word	0x20000770
 8000300:	200006d8 	.word	0x200006d8

08000304 <Saving>:

void
Saving ()
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
	//try to include a message like: char message[300] "Book mark index is 2024"
	char pData[5] = "Saved";
 800030a:	4a09      	ldr	r2, [pc, #36]	; (8000330 <Saving+0x2c>)
 800030c:	463b      	mov	r3, r7
 800030e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000312:	6018      	str	r0, [r3, #0]
 8000314:	3304      	adds	r3, #4
 8000316:	7019      	strb	r1, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)pData, 5 , 1000);
 8000318:	4639      	mov	r1, r7
 800031a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800031e:	2205      	movs	r2, #5
 8000320:	4804      	ldr	r0, [pc, #16]	; (8000334 <Saving+0x30>)
 8000322:	f002 fe53 	bl	8002fcc <HAL_UART_Transmit>

	 	 /*lcd_clear(&p_LCD);
	 	 lcd_i2c_init(&p_LCD, &hi2c1, 16, 2, 0x27<<1);
	 	 lcd_set_cursor(&p_LCD, 0, 0);
	 	 lcd_send_string(&p_LCD, "Saved");*/
}
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	08003a4c 	.word	0x08003a4c
 8000334:	200006d8 	.word	0x200006d8

08000338 <main>:
  * @brief  The application entry point.
  * @retval int
  */
int
main (void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033e:	f000 fd31 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000342:	f000 fa19 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000346:	f000 fb1b 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 800034a:	f000 fafb 	bl	8000944 <MX_DMA_Init>
  MX_I2C1_Init();
 800034e:	f000 faa1 	bl	8000894 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000352:	f000 facd 	bl	80008f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000356:	f000 fa5f 	bl	8000818 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart1,&Rx_Buf,1);
  uint32_t timing = HAL_GetTick();
 800035a:	f000 fd7b 	bl	8000e54 <HAL_GetTick>
 800035e:	6178      	str	r0, [r7, #20]
  uint8_t capital_letter = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	74fb      	strb	r3, [r7, #19]
  uint8_t number_state = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	74bb      	strb	r3, [r7, #18]
  int t = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]

  HAL_UART_Receive_DMA (&huart2, UART1_rxBuffer, 12);
 800036c:	220c      	movs	r2, #12
 800036e:	49a5      	ldr	r1, [pc, #660]	; (8000604 <main+0x2cc>)
 8000370:	48a5      	ldr	r0, [pc, #660]	; (8000608 <main+0x2d0>)
 8000372:	f002 feae 	bl	80030d2 <HAL_UART_Receive_DMA>
  lcd_i2c_init (&p_LCD, &hi2c1, 16, 2, 0x27<<1);
 8000376:	234e      	movs	r3, #78	; 0x4e
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	2302      	movs	r3, #2
 800037c:	2210      	movs	r2, #16
 800037e:	49a3      	ldr	r1, [pc, #652]	; (800060c <main+0x2d4>)
 8000380:	48a3      	ldr	r0, [pc, #652]	; (8000610 <main+0x2d8>)
 8000382:	f003 fa07 	bl	8003794 <lcd_i2c_init>
  lcd_set_cursor (&p_LCD, 0, 0);
 8000386:	2200      	movs	r2, #0
 8000388:	2100      	movs	r1, #0
 800038a:	48a1      	ldr	r0, [pc, #644]	; (8000610 <main+0x2d8>)
 800038c:	f003 fad0 	bl	8003930 <lcd_set_cursor>
  lcd_send_string (&p_LCD, "Started reading");
 8000390:	49a0      	ldr	r1, [pc, #640]	; (8000614 <main+0x2dc>)
 8000392:	489f      	ldr	r0, [pc, #636]	; (8000610 <main+0x2d8>)
 8000394:	f003 faf6 	bl	8003984 <lcd_send_string>
  HAL_Delay (2000);
 8000398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800039c:	f000 fd64 	bl	8000e68 <HAL_Delay>
  lcd_clear (&p_LCD);
 80003a0:	489b      	ldr	r0, [pc, #620]	; (8000610 <main+0x2d8>)
 80003a2:	f003 fb06 	bl	80039b2 <lcd_clear>

  //Tốc độ
  //float rate=HAL_ADC_GetValue(&hadc1);
  int speed = 2000;
 80003a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80003aa:	603b      	str	r3, [r7, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Chong rung ngat
	if ((is_debounced1 == 0) && ((HAL_GetTick() - debounce_timer1) >= 100))
 80003ac:	4b9a      	ldr	r3, [pc, #616]	; (8000618 <main+0x2e0>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d11d      	bne.n	80003f0 <main+0xb8>
 80003b4:	f000 fd4e 	bl	8000e54 <HAL_GetTick>
 80003b8:	4602      	mov	r2, r0
 80003ba:	4b98      	ldr	r3, [pc, #608]	; (800061c <main+0x2e4>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	1ad3      	subs	r3, r2, r3
 80003c0:	2b63      	cmp	r3, #99	; 0x63
 80003c2:	d915      	bls.n	80003f0 <main+0xb8>
	{
	  	is_debounced1 = 1;
 80003c4:	4b94      	ldr	r3, [pc, #592]	; (8000618 <main+0x2e0>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
	  	HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	4894      	ldr	r0, [pc, #592]	; (8000620 <main+0x2e8>)
 80003d0:	f001 fc18 	bl	8001c04 <HAL_GPIO_TogglePin>
	  	if(state_pause == 2)
 80003d4:	4b93      	ldr	r3, [pc, #588]	; (8000624 <main+0x2ec>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d103      	bne.n	80003e4 <main+0xac>
	  	{
	  		state_pause = 0;
 80003dc:	4b91      	ldr	r3, [pc, #580]	; (8000624 <main+0x2ec>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
 80003e2:	e005      	b.n	80003f0 <main+0xb8>
	  	}

	  	else
	  	{
	  		state_pause += 1;
 80003e4:	4b8f      	ldr	r3, [pc, #572]	; (8000624 <main+0x2ec>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	3301      	adds	r3, #1
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	4b8d      	ldr	r3, [pc, #564]	; (8000624 <main+0x2ec>)
 80003ee:	701a      	strb	r2, [r3, #0]
	  	}
	}

	//In du lieu
	if (state_pause == 0)
 80003f0:	4b8c      	ldr	r3, [pc, #560]	; (8000624 <main+0x2ec>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1d9      	bne.n	80003ac <main+0x74>
	{
		lcd_set_cursor (&p_LCD,0,0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	4884      	ldr	r0, [pc, #528]	; (8000610 <main+0x2d8>)
 80003fe:	f003 fa97 	bl	8003930 <lcd_set_cursor>
		lcd_clear (&p_LCD);
 8000402:	4883      	ldr	r0, [pc, #524]	; (8000610 <main+0x2d8>)
 8000404:	f003 fad5 	bl	80039b2 <lcd_clear>
	  	for (int i = 0; i < strlen ((const char *) UART1_rxBuffer); i++)
 8000408:	2300      	movs	r3, #0
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	e157      	b.n	80006be <main+0x386>
	  	{
	  		input = UART1_rxBuffer[t];
 800040e:	4a7d      	ldr	r2, [pc, #500]	; (8000604 <main+0x2cc>)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	4413      	add	r3, r2
 8000414:	781a      	ldrb	r2, [r3, #0]
 8000416:	4b84      	ldr	r3, [pc, #528]	; (8000628 <main+0x2f0>)
 8000418:	701a      	strb	r2, [r3, #0]
				//printing in LCD
			lcd_i2c_init(&p_LCD, &hi2c1, 16, 2, 0x27<<1);
 800041a:	234e      	movs	r3, #78	; 0x4e
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	2302      	movs	r3, #2
 8000420:	2210      	movs	r2, #16
 8000422:	497a      	ldr	r1, [pc, #488]	; (800060c <main+0x2d4>)
 8000424:	487a      	ldr	r0, [pc, #488]	; (8000610 <main+0x2d8>)
 8000426:	f003 f9b5 	bl	8003794 <lcd_i2c_init>
			if (i > 31)
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	2b1f      	cmp	r3, #31
 800042e:	dd0b      	ble.n	8000448 <main+0x110>
			{
				lcd_set_cursor(&p_LCD,0,0);
 8000430:	2200      	movs	r2, #0
 8000432:	2100      	movs	r1, #0
 8000434:	4876      	ldr	r0, [pc, #472]	; (8000610 <main+0x2d8>)
 8000436:	f003 fa7b 	bl	8003930 <lcd_set_cursor>
				lcd_clear(&p_LCD);
 800043a:	4875      	ldr	r0, [pc, #468]	; (8000610 <main+0x2d8>)
 800043c:	f003 fab9 	bl	80039b2 <lcd_clear>
				i = -1;
 8000440:	f04f 33ff 	mov.w	r3, #4294967295
 8000444:	60bb      	str	r3, [r7, #8]
				continue;
 8000446:	e137      	b.n	80006b8 <main+0x380>
			}

			else if (i>15)
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	2b0f      	cmp	r3, #15
 800044c:	dd11      	ble.n	8000472 <main+0x13a>
			{
				lcd_set_cursor(&p_LCD, i-16, 1);
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	3b10      	subs	r3, #16
 8000454:	b2db      	uxtb	r3, r3
 8000456:	2201      	movs	r2, #1
 8000458:	4619      	mov	r1, r3
 800045a:	486d      	ldr	r0, [pc, #436]	; (8000610 <main+0x2d8>)
 800045c:	f003 fa68 	bl	8003930 <lcd_set_cursor>
				lcd_send_data(&p_LCD, UART1_rxBuffer[t]);
 8000460:	4a68      	ldr	r2, [pc, #416]	; (8000604 <main+0x2cc>)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	4413      	add	r3, r2
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4619      	mov	r1, r3
 800046a:	4869      	ldr	r0, [pc, #420]	; (8000610 <main+0x2d8>)
 800046c:	f003 fa2e 	bl	80038cc <lcd_send_data>
 8000470:	e00e      	b.n	8000490 <main+0x158>
			}

			else
			{
				lcd_set_cursor(&p_LCD, i, 0);
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2200      	movs	r2, #0
 8000478:	4619      	mov	r1, r3
 800047a:	4865      	ldr	r0, [pc, #404]	; (8000610 <main+0x2d8>)
 800047c:	f003 fa58 	bl	8003930 <lcd_set_cursor>
				lcd_send_data(&p_LCD, UART1_rxBuffer[t]);
 8000480:	4a60      	ldr	r2, [pc, #384]	; (8000604 <main+0x2cc>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	4413      	add	r3, r2
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	4861      	ldr	r0, [pc, #388]	; (8000610 <main+0x2d8>)
 800048c:	f003 fa1e 	bl	80038cc <lcd_send_data>
			}

			//printing by solenoid
			if ((input >= 65) && (input <= 90))
 8000490:	4b65      	ldr	r3, [pc, #404]	; (8000628 <main+0x2f0>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b40      	cmp	r3, #64	; 0x40
 8000496:	d90c      	bls.n	80004b2 <main+0x17a>
 8000498:	4b63      	ldr	r3, [pc, #396]	; (8000628 <main+0x2f0>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b5a      	cmp	r3, #90	; 0x5a
 800049e:	d808      	bhi.n	80004b2 <main+0x17a>
			{
				input += 32;
 80004a0:	4b61      	ldr	r3, [pc, #388]	; (8000628 <main+0x2f0>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	3320      	adds	r3, #32
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	4b5f      	ldr	r3, [pc, #380]	; (8000628 <main+0x2f0>)
 80004aa:	701a      	strb	r2, [r3, #0]
				capital_letter = 1;
 80004ac:	2301      	movs	r3, #1
 80004ae:	74fb      	strb	r3, [r7, #19]
 80004b0:	e00f      	b.n	80004d2 <main+0x19a>
			}

			else if ((input >= '0') && (input <= '9'))
 80004b2:	4b5d      	ldr	r3, [pc, #372]	; (8000628 <main+0x2f0>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b2f      	cmp	r3, #47	; 0x2f
 80004b8:	d90b      	bls.n	80004d2 <main+0x19a>
 80004ba:	4b5b      	ldr	r3, [pc, #364]	; (8000628 <main+0x2f0>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b39      	cmp	r3, #57	; 0x39
 80004c0:	d807      	bhi.n	80004d2 <main+0x19a>
			{
				number_state = 1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	74bb      	strb	r3, [r7, #18]
				input += 49;
 80004c6:	4b58      	ldr	r3, [pc, #352]	; (8000628 <main+0x2f0>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	3331      	adds	r3, #49	; 0x31
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b56      	ldr	r3, [pc, #344]	; (8000628 <main+0x2f0>)
 80004d0:	701a      	strb	r2, [r3, #0]
			}

			for (int j=0; j < sizeof(ascii);j++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	e05b      	b.n	8000590 <main+0x258>
			{
				if (input == ascii[j])
 80004d8:	4a54      	ldr	r2, [pc, #336]	; (800062c <main+0x2f4>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	4b51      	ldr	r3, [pc, #324]	; (8000628 <main+0x2f0>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d150      	bne.n	800058a <main+0x252>
				{
					output = dot[j];
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	4613      	mov	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	4413      	add	r3, r2
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	4a4f      	ldr	r2, [pc, #316]	; (8000630 <main+0x2f8>)
 80004f4:	4413      	add	r3, r2
 80004f6:	4a4f      	ldr	r2, [pc, #316]	; (8000634 <main+0x2fc>)
 80004f8:	6013      	str	r3, [r2, #0]
					if (capital_letter == 1)
 80004fa:	7cfb      	ldrb	r3, [r7, #19]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d111      	bne.n	8000524 <main+0x1ec>
					{
						while ((HAL_GetTick() - timing) <= speed / 2) Capital_Letter();
 8000500:	e001      	b.n	8000506 <main+0x1ce>
 8000502:	f7ff fe75 	bl	80001f0 <Capital_Letter>
 8000506:	f000 fca5 	bl	8000e54 <HAL_GetTick>
 800050a:	4602      	mov	r2, r0
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	1ad2      	subs	r2, r2, r3
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	0fd9      	lsrs	r1, r3, #31
 8000514:	440b      	add	r3, r1
 8000516:	105b      	asrs	r3, r3, #1
 8000518:	429a      	cmp	r2, r3
 800051a:	d9f2      	bls.n	8000502 <main+0x1ca>
						timing = HAL_GetTick();
 800051c:	f000 fc9a 	bl	8000e54 <HAL_GetTick>
 8000520:	6178      	str	r0, [r7, #20]
 8000522:	e019      	b.n	8000558 <main+0x220>
					}

					else if (number_state == 1)
 8000524:	7cbb      	ldrb	r3, [r7, #18]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d116      	bne.n	8000558 <main+0x220>
					{
						while ((HAL_GetTick() - timing) <= speed / 2) number();
 800052a:	e001      	b.n	8000530 <main+0x1f8>
 800052c:	f7ff fe74 	bl	8000218 <number>
 8000530:	f000 fc90 	bl	8000e54 <HAL_GetTick>
 8000534:	4602      	mov	r2, r0
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	1ad2      	subs	r2, r2, r3
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	0fd9      	lsrs	r1, r3, #31
 800053e:	440b      	add	r3, r1
 8000540:	105b      	asrs	r3, r3, #1
 8000542:	429a      	cmp	r2, r3
 8000544:	d9f2      	bls.n	800052c <main+0x1f4>
						timing = HAL_GetTick();
 8000546:	f000 fc85 	bl	8000e54 <HAL_GetTick>
 800054a:	6178      	str	r0, [r7, #20]
					}

					while ((HAL_GetTick() - timing) <= speed)
 800054c:	e004      	b.n	8000558 <main+0x220>
					{
						Display_by_Solenoid(output);
 800054e:	4b39      	ldr	r3, [pc, #228]	; (8000634 <main+0x2fc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe02 	bl	800015c <Display_by_Solenoid>
					while ((HAL_GetTick() - timing) <= speed)
 8000558:	f000 fc7c 	bl	8000e54 <HAL_GetTick>
 800055c:	4602      	mov	r2, r0
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	1ad2      	subs	r2, r2, r3
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	429a      	cmp	r2, r3
 8000566:	d9f2      	bls.n	800054e <main+0x216>
					}

					timing = HAL_GetTick();
 8000568:	f000 fc74 	bl	8000e54 <HAL_GetTick>
 800056c:	6178      	str	r0, [r7, #20]

							//transition
					while ((HAL_GetTick() - timing) <= 50) chuyen();
 800056e:	e001      	b.n	8000574 <main+0x23c>
 8000570:	f7ff fe64 	bl	800023c <chuyen>
 8000574:	f000 fc6e 	bl	8000e54 <HAL_GetTick>
 8000578:	4602      	mov	r2, r0
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	2b32      	cmp	r3, #50	; 0x32
 8000580:	d9f6      	bls.n	8000570 <main+0x238>

					timing = HAL_GetTick();
 8000582:	f000 fc67 	bl	8000e54 <HAL_GetTick>
 8000586:	6178      	str	r0, [r7, #20]
					break;
 8000588:	e005      	b.n	8000596 <main+0x25e>
			for (int j=0; j < sizeof(ascii);j++)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3301      	adds	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b3e      	cmp	r3, #62	; 0x3e
 8000594:	d9a0      	bls.n	80004d8 <main+0x1a0>
					}
				}
	  	//move to next character
	  		t++;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3301      	adds	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]

	  		if ((is_debounced1 == 0) && ((HAL_GetTick() - debounce_timer1) >= 100))
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <main+0x2e0>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d11d      	bne.n	80005e0 <main+0x2a8>
 80005a4:	f000 fc56 	bl	8000e54 <HAL_GetTick>
 80005a8:	4602      	mov	r2, r0
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <main+0x2e4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	1ad3      	subs	r3, r2, r3
 80005b0:	2b63      	cmp	r3, #99	; 0x63
 80005b2:	d915      	bls.n	80005e0 <main+0x2a8>
	  		{
	  			is_debounced1 = 1;
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <main+0x2e0>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80005ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005be:	4818      	ldr	r0, [pc, #96]	; (8000620 <main+0x2e8>)
 80005c0:	f001 fb20 	bl	8001c04 <HAL_GPIO_TogglePin>
	  			if(state_pause == 2)
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <main+0x2ec>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d103      	bne.n	80005d4 <main+0x29c>
	  			{
	  				state_pause = 0;
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <main+0x2ec>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e005      	b.n	80005e0 <main+0x2a8>
	  			}

	  			else
	  			{
	  				state_pause += 1;
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <main+0x2ec>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <main+0x2ec>)
 80005de:	701a      	strb	r2, [r3, #0]
	  			}
	  		}

	  		if (state_pause == 1)
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <main+0x2ec>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d129      	bne.n	800063c <main+0x304>
	  		{
	     	  	lcd_set_cursor(&p_LCD,0,0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <main+0x2d8>)
 80005ee:	f003 f99f 	bl	8003930 <lcd_set_cursor>
	     	  	lcd_clear(&p_LCD);
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x2d8>)
 80005f4:	f003 f9dd 	bl	80039b2 <lcd_clear>
	     	  	lcd_send_string(&p_LCD, "Pausing");
 80005f8:	490f      	ldr	r1, [pc, #60]	; (8000638 <main+0x300>)
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <main+0x2d8>)
 80005fc:	f003 f9c2 	bl	8003984 <lcd_send_string>
	     	  	break;
 8000600:	e065      	b.n	80006ce <main+0x396>
 8000602:	bf00      	nop
 8000604:	20000770 	.word	0x20000770
 8000608:	200006d8 	.word	0x200006d8
 800060c:	20000684 	.word	0x20000684
 8000610:	20000764 	.word	0x20000764
 8000614:	08003a54 	.word	0x08003a54
 8000618:	20000627 	.word	0x20000627
 800061c:	20000b7c 	.word	0x20000b7c
 8000620:	40011000 	.word	0x40011000
 8000624:	20000b79 	.word	0x20000b79
 8000628:	20000b70 	.word	0x20000b70
 800062c:	200005e8 	.word	0x200005e8
 8000630:	20000000 	.word	0x20000000
 8000634:	20000b74 	.word	0x20000b74
 8000638:	08003a64 	.word	0x08003a64
	  		}


	  		if ((is_debounced2 == 0) && ((HAL_GetTick() - debounce_timer2) >= 100))
 800063c:	4b43      	ldr	r3, [pc, #268]	; (800074c <main+0x414>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d11d      	bne.n	8000680 <main+0x348>
 8000644:	f000 fc06 	bl	8000e54 <HAL_GetTick>
 8000648:	4602      	mov	r2, r0
 800064a:	4b41      	ldr	r3, [pc, #260]	; (8000750 <main+0x418>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	2b63      	cmp	r3, #99	; 0x63
 8000652:	d915      	bls.n	8000680 <main+0x348>
	  		{
	  			is_debounced2 = 1;
 8000654:	4b3d      	ldr	r3, [pc, #244]	; (800074c <main+0x414>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 800065a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065e:	483d      	ldr	r0, [pc, #244]	; (8000754 <main+0x41c>)
 8000660:	f001 fad0 	bl	8001c04 <HAL_GPIO_TogglePin>
	  			if(state_send == 2) state_send = 0;
 8000664:	4b3c      	ldr	r3, [pc, #240]	; (8000758 <main+0x420>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b02      	cmp	r3, #2
 800066a:	d103      	bne.n	8000674 <main+0x33c>
 800066c:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <main+0x420>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e005      	b.n	8000680 <main+0x348>
	  			else state_send += 1;
 8000674:	4b38      	ldr	r3, [pc, #224]	; (8000758 <main+0x420>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b36      	ldr	r3, [pc, #216]	; (8000758 <main+0x420>)
 800067e:	701a      	strb	r2, [r3, #0]
	  		}

	  		if (state_send == 1)
 8000680:	4b35      	ldr	r3, [pc, #212]	; (8000758 <main+0x420>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d101      	bne.n	800068c <main+0x354>
	  		{
	  			Saving();
 8000688:	f7ff fe3c 	bl	8000304 <Saving>
	  		}

	  		if (t == strlen((const char *) UART1_rxBuffer))
 800068c:	4833      	ldr	r0, [pc, #204]	; (800075c <main+0x424>)
 800068e:	f7ff fd5d 	bl	800014c <strlen>
 8000692:	4602      	mov	r2, r0
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	429a      	cmp	r2, r3
 8000698:	d10e      	bne.n	80006b8 <main+0x380>
	  		{
				t = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
				lcd_set_cursor (&p_LCD, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	482f      	ldr	r0, [pc, #188]	; (8000760 <main+0x428>)
 80006a4:	f003 f944 	bl	8003930 <lcd_set_cursor>
				lcd_clear (&p_LCD);
 80006a8:	482d      	ldr	r0, [pc, #180]	; (8000760 <main+0x428>)
 80006aa:	f003 f982 	bl	80039b2 <lcd_clear>
				lcd_send_string (&p_LCD, "Finish reading");
 80006ae:	492d      	ldr	r1, [pc, #180]	; (8000764 <main+0x42c>)
 80006b0:	482b      	ldr	r0, [pc, #172]	; (8000760 <main+0x428>)
 80006b2:	f003 f967 	bl	8003984 <lcd_send_string>
				break;
 80006b6:	e00a      	b.n	80006ce <main+0x396>
	  	for (int i = 0; i < strlen ((const char *) UART1_rxBuffer); i++)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4827      	ldr	r0, [pc, #156]	; (800075c <main+0x424>)
 80006c0:	f7ff fd44 	bl	800014c <strlen>
 80006c4:	4602      	mov	r2, r0
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	f63f aea0 	bhi.w	800040e <main+0xd6>
	  		}
	  	}

	  	while (state_pause == 1){
 80006ce:	e038      	b.n	8000742 <main+0x40a>
	  		lcd_set_cursor(&p_LCD,0,0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	4822      	ldr	r0, [pc, #136]	; (8000760 <main+0x428>)
 80006d6:	f003 f92b 	bl	8003930 <lcd_set_cursor>
	  		lcd_clear(&p_LCD);
 80006da:	4821      	ldr	r0, [pc, #132]	; (8000760 <main+0x428>)
 80006dc:	f003 f969 	bl	80039b2 <lcd_clear>
	  		lcd_send_string(&p_LCD, "Pausing");
 80006e0:	4921      	ldr	r1, [pc, #132]	; (8000768 <main+0x430>)
 80006e2:	481f      	ldr	r0, [pc, #124]	; (8000760 <main+0x428>)
 80006e4:	f003 f94e 	bl	8003984 <lcd_send_string>

	  		if (state_send == 1)
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <main+0x420>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d101      	bne.n	80006f4 <main+0x3bc>
	  		{
	  			Saving();
 80006f0:	f7ff fe08 	bl	8000304 <Saving>
	  		}

	  		if ((is_debounced1 == 0) && ((HAL_GetTick() - debounce_timer1) >= 100))
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <main+0x434>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d11d      	bne.n	8000738 <main+0x400>
 80006fc:	f000 fbaa 	bl	8000e54 <HAL_GetTick>
 8000700:	4602      	mov	r2, r0
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <main+0x438>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	2b63      	cmp	r3, #99	; 0x63
 800070a:	d915      	bls.n	8000738 <main+0x400>
	  		{
	  			is_debounced1 = 1;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <main+0x434>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000716:	480f      	ldr	r0, [pc, #60]	; (8000754 <main+0x41c>)
 8000718:	f001 fa74 	bl	8001c04 <HAL_GPIO_TogglePin>
	  			if(state_pause == 2)
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <main+0x43c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d103      	bne.n	800072c <main+0x3f4>
	  			{
	  				state_pause = 0;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <main+0x43c>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
 800072a:	e005      	b.n	8000738 <main+0x400>
	  			}

	  			else
	  			{
	  				state_pause +=1;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <main+0x43c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <main+0x43c>)
 8000736:	701a      	strb	r2, [r3, #0]
	  			}
	  		}

	  		if (state_pause == 0)
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <main+0x43c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d100      	bne.n	8000742 <main+0x40a>
	  		{
	  			continue;
 8000740:	bf00      	nop
	  	while (state_pause == 1){
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <main+0x43c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d0c2      	beq.n	80006d0 <main+0x398>
	if ((is_debounced1 == 0) && ((HAL_GetTick() - debounce_timer1) >= 100))
 800074a:	e62f      	b.n	80003ac <main+0x74>
 800074c:	20000628 	.word	0x20000628
 8000750:	20000b80 	.word	0x20000b80
 8000754:	40011000 	.word	0x40011000
 8000758:	20000b78 	.word	0x20000b78
 800075c:	20000770 	.word	0x20000770
 8000760:	20000764 	.word	0x20000764
 8000764:	08003a6c 	.word	0x08003a6c
 8000768:	08003a64 	.word	0x08003a64
 800076c:	20000627 	.word	0x20000627
 8000770:	20000b7c 	.word	0x20000b7c
 8000774:	20000b79 	.word	0x20000b79

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000782:	2228      	movs	r2, #40	; 0x28
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f003 f927 	bl	80039da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 feef 	bl	80025a0 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80007c8:	f000 f95a 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 f95c 	bl	8002aa4 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007f2:	f000 f945 	bl	8000a80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007f6:	2302      	movs	r3, #2
 80007f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fadd 	bl	8002dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800080c:	f000 f938 	bl	8000a80 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	3750      	adds	r7, #80	; 0x50
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_ADC1_Init+0x74>)
 800082a:	4a19      	ldr	r2, [pc, #100]	; (8000890 <MX_ADC1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_ADC1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_ADC1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_ADC1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_ADC1_Init+0x74>)
 8000842:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000846:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_ADC1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_ADC1_Init+0x74>)
 8000850:	2201      	movs	r2, #1
 8000852:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_ADC1_Init+0x74>)
 8000856:	f000 fb2b 	bl	8000eb0 <HAL_ADC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 f90e 	bl	8000a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000864:	2307      	movs	r3, #7
 8000866:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000868:	2301      	movs	r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_ADC1_Init+0x74>)
 8000876:	f000 fbf3 	bl	8001060 <HAL_ADC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000880:	f000 f8fe 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000654 	.word	0x20000654
 8000890:	40012400 	.word	0x40012400

08000894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_I2C1_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_I2C1_Init+0x58>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008d2:	f001 f9c9 	bl	8001c68 <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f8d0 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000684 	.word	0x20000684
 80008e8:	40005400 	.word	0x40005400
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART2_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000928:	f002 fb00 	bl	8002f2c <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f8a5 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200006d8 	.word	0x200006d8
 8000940:	40004400 	.word	0x40004400

08000944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_DMA_Init+0x38>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <MX_DMA_Init+0x38>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_DMA_Init+0x38>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2010      	movs	r0, #16
 8000968:	f000 fd8b 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800096c:	2010      	movs	r0, #16
 800096e:	f000 fda4 	bl	80014ba <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000994:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <MX_GPIO_Init+0xf0>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a35      	ldr	r2, [pc, #212]	; (8000a70 <MX_GPIO_Init+0xf0>)
 800099a:	f043 0320 	orr.w	r3, r3, #32
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <MX_GPIO_Init+0xf0>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0320 	and.w	r3, r3, #32
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <MX_GPIO_Init+0xf0>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <MX_GPIO_Init+0xf0>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <MX_GPIO_Init+0xf0>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MX_GPIO_Init+0xf0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <MX_GPIO_Init+0xf0>)
 80009ca:	f043 0308 	orr.w	r3, r3, #8
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <MX_GPIO_Init+0xf0>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0308 	and.w	r3, r3, #8
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80009dc:	2200      	movs	r2, #0
 80009de:	f641 4132 	movw	r1, #7218	; 0x1c32
 80009e2:	4824      	ldr	r0, [pc, #144]	; (8000a74 <MX_GPIO_Init+0xf4>)
 80009e4:	f001 f8f6 	bl	8001bd4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ee:	4822      	ldr	r0, [pc, #136]	; (8000a78 <MX_GPIO_Init+0xf8>)
 80009f0:	f001 f8f0 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80009f4:	2321      	movs	r3, #33	; 0x21
 80009f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_GPIO_Init+0xfc>)
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	481c      	ldr	r0, [pc, #112]	; (8000a78 <MX_GPIO_Init+0xf8>)
 8000a08:	f000 ff60 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB11 PB12
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000a0c:	f641 4332 	movw	r3, #7218	; 0x1c32
 8000a10:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <MX_GPIO_Init+0xf4>)
 8000a26:	f000 ff51 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_GPIO_Init+0xf8>)
 8000a44:	f000 ff42 	bl	80018cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f000 fd18 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a52:	2006      	movs	r0, #6
 8000a54:	f000 fd31 	bl	80014ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	2017      	movs	r0, #23
 8000a5e:	f000 fd10 	bl	8001482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a62:	2017      	movs	r0, #23
 8000a64:	f000 fd29 	bl	80014ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	40010800 	.word	0x40010800
 8000a7c:	10110000 	.word	0x10110000

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6193      	str	r3, [r2, #24]
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	61d3      	str	r3, [r2, #28]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_MspInit+0x5c>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_MspInit+0x60>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_MspInit+0x60>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000

08000af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_ADC_MspInit+0x6c>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d121      	bne.n	8000b54 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <HAL_ADC_MspInit+0x70>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <HAL_ADC_MspInit+0x70>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_ADC_MspInit+0x70>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_ADC_MspInit+0x70>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <HAL_ADC_MspInit+0x70>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_ADC_MspInit+0x70>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b44:	2303      	movs	r3, #3
 8000b46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <HAL_ADC_MspInit+0x74>)
 8000b50:	f000 febc 	bl	80018cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40012400 	.word	0x40012400
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010800 	.word	0x40010800

08000b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <HAL_I2C_MspInit+0x70>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d123      	bne.n	8000bd0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_I2C_MspInit+0x74>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_I2C_MspInit+0x74>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_I2C_MspInit+0x74>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ba0:	23c0      	movs	r3, #192	; 0xc0
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba4:	2312      	movs	r3, #18
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <HAL_I2C_MspInit+0x78>)
 8000bb4:	f000 fe8a 	bl	80018cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_I2C_MspInit+0x74>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_I2C_MspInit+0x74>)
 8000bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc2:	61d3      	str	r3, [r2, #28]
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_I2C_MspInit+0x74>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a2e      	ldr	r2, [pc, #184]	; (8000cb8 <HAL_UART_MspInit+0xd4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d155      	bne.n	8000cb0 <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <HAL_UART_MspInit+0xd8>)
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	4a2c      	ldr	r2, [pc, #176]	; (8000cbc <HAL_UART_MspInit+0xd8>)
 8000c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0e:	61d3      	str	r3, [r2, #28]
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <HAL_UART_MspInit+0xd8>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <HAL_UART_MspInit+0xd8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <HAL_UART_MspInit+0xd8>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <HAL_UART_MspInit+0xd8>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c34:	2304      	movs	r3, #4
 8000c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <HAL_UART_MspInit+0xdc>)
 8000c48:	f000 fe40 	bl	80018cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <HAL_UART_MspInit+0xdc>)
 8000c60:	f000 fe34 	bl	80018cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000c66:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <HAL_UART_MspInit+0xe4>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000c96:	f000 fc2b 	bl	80014f0 <HAL_DMA_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000ca0:	f7ff feee 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000ca8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000caa:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_UART_MspInit+0xe0>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40004400 	.word	0x40004400
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	20000720 	.word	0x20000720
 8000cc8:	4002006c 	.word	0x4002006c

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d12:	f000 f88d 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 ff8a 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <DMA1_Channel6_IRQHandler+0x10>)
 8000d2e:	f000 fc99 	bl	8001664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000720 	.word	0x20000720

08000d3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d40:	2020      	movs	r0, #32
 8000d42:	f000 ff79 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
	...

08000d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d58:	f7ff fff7 	bl	8000d4a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d5e:	490c      	ldr	r1, [pc, #48]	; (8000d90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d74:	4c09      	ldr	r4, [pc, #36]	; (8000d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d82:	f002 fe33 	bl	80039ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff fad7 	bl	8000338 <main>
  bx lr
 8000d8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000638 	.word	0x20000638
  ldr r2, =_sidata
 8000d94:	08003ab0 	.word	0x08003ab0
  ldr r2, =_sbss
 8000d98:	20000638 	.word	0x20000638
  ldr r4, =_ebss
 8000d9c:	20000b88 	.word	0x20000b88

08000da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC1_2_IRQHandler>
	...

08000da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x28>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x28>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 fb59 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	200f      	movs	r0, #15
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fe64 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fb71 	bl	80014d6 <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 fb39 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000062c 	.word	0x2000062c
 8000e28:	20000634 	.word	0x20000634
 8000e2c:	20000630 	.word	0x20000630

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x20>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_IncTick+0x20>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	20000634 	.word	0x20000634
 8000e50:	20000b84 	.word	0x20000b84

08000e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <HAL_GetTick+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000b84 	.word	0x20000b84

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff fff0 	bl	8000e54 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffe0 	bl	8000e54 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000634 	.word	0x20000634

08000eb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e0be      	b.n	8001050 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d109      	bne.n	8000ef4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fdfe 	bl	8000af0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f9ab 	bl	8001250 <ADC_ConversionStop_Disable>
 8000efa:	4603      	mov	r3, r0
 8000efc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 8099 	bne.w	800103e <HAL_ADC_Init+0x18e>
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f040 8095 	bne.w	800103e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f1c:	f023 0302 	bic.w	r3, r3, #2
 8000f20:	f043 0202 	orr.w	r2, r3, #2
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7b1b      	ldrb	r3, [r3, #12]
 8000f36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f48:	d003      	beq.n	8000f52 <HAL_ADC_Init+0xa2>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d102      	bne.n	8000f58 <HAL_ADC_Init+0xa8>
 8000f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f56:	e000      	b.n	8000f5a <HAL_ADC_Init+0xaa>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7d1b      	ldrb	r3, [r3, #20]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d119      	bne.n	8000f9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7b1b      	ldrb	r3, [r3, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d109      	bne.n	8000f84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	035a      	lsls	r2, r3, #13
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	e00b      	b.n	8000f9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	f043 0220 	orr.w	r2, r3, #32
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f94:	f043 0201 	orr.w	r2, r3, #1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <HAL_ADC_Init+0x1a8>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fcc:	d003      	beq.n	8000fd6 <HAL_ADC_Init+0x126>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d104      	bne.n	8000fe0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	051b      	lsls	r3, r3, #20
 8000fde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_ADC_Init+0x1ac>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	429a      	cmp	r2, r3
 8001002:	d10b      	bne.n	800101c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	f023 0303 	bic.w	r3, r3, #3
 8001012:	f043 0201 	orr.w	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800101a:	e018      	b.n	800104e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	f023 0312 	bic.w	r3, r3, #18
 8001024:	f043 0210 	orr.w	r2, r3, #16
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800103c:	e007      	b.n	800104e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	f043 0210 	orr.w	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800104e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	ffe1f7fd 	.word	0xffe1f7fd
 800105c:	ff1f0efe 	.word	0xff1f0efe

08001060 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_ADC_ConfigChannel+0x20>
 800107c:	2302      	movs	r3, #2
 800107e:	e0dc      	b.n	800123a <HAL_ADC_ConfigChannel+0x1da>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b06      	cmp	r3, #6
 800108e:	d81c      	bhi.n	80010ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	3b05      	subs	r3, #5
 80010a2:	221f      	movs	r2, #31
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	4019      	ands	r1, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	3b05      	subs	r3, #5
 80010bc:	fa00 f203 	lsl.w	r2, r0, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
 80010c8:	e03c      	b.n	8001144 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	d81c      	bhi.n	800110c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	3b23      	subs	r3, #35	; 0x23
 80010e4:	221f      	movs	r2, #31
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	4019      	ands	r1, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	3b23      	subs	r3, #35	; 0x23
 80010fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
 800110a:	e01b      	b.n	8001144 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	3b41      	subs	r3, #65	; 0x41
 800111e:	221f      	movs	r2, #31
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	4019      	ands	r1, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b41      	subs	r3, #65	; 0x41
 8001138:	fa00 f203 	lsl.w	r2, r0, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b09      	cmp	r3, #9
 800114a:	d91c      	bls.n	8001186 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68d9      	ldr	r1, [r3, #12]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	3b1e      	subs	r3, #30
 800115e:	2207      	movs	r2, #7
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	4019      	ands	r1, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	6898      	ldr	r0, [r3, #8]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	3b1e      	subs	r3, #30
 8001178:	fa00 f203 	lsl.w	r2, r0, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	e019      	b.n	80011ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6919      	ldr	r1, [r3, #16]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	2207      	movs	r2, #7
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	4019      	ands	r1, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6898      	ldr	r0, [r3, #8]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	fa00 f203 	lsl.w	r2, r0, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b10      	cmp	r3, #16
 80011c0:	d003      	beq.n	80011ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011c6:	2b11      	cmp	r3, #17
 80011c8:	d132      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_ADC_ConfigChannel+0x1e4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d125      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d126      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d11a      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_ADC_ConfigChannel+0x1e8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_ADC_ConfigChannel+0x1ec>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9a      	lsrs	r2, r3, #18
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001210:	e002      	b.n	8001218 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3b01      	subs	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f9      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x1b2>
 800121e:	e007      	b.n	8001230 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	f043 0220 	orr.w	r2, r3, #32
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	40012400 	.word	0x40012400
 8001248:	2000062c 	.word	0x2000062c
 800124c:	431bde83 	.word	0x431bde83

08001250 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d12e      	bne.n	80012c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800127a:	f7ff fdeb 	bl	8000e54 <HAL_GetTick>
 800127e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001280:	e01b      	b.n	80012ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001282:	f7ff fde7 	bl	8000e54 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d914      	bls.n	80012ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10d      	bne.n	80012ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a2:	f043 0210 	orr.w	r2, r3, #16
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	f043 0201 	orr.w	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e007      	b.n	80012ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d0dc      	beq.n	8001282 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4906      	ldr	r1, [pc, #24]	; (800136c <__NVIC_EnableIRQ+0x34>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff90 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff2d 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff42 	bl	800131c <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff90 	bl	80013c4 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5f 	bl	8001370 <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff35 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e043      	b.n	800158e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_DMA_Init+0xa8>)
 800150e:	4413      	add	r3, r2
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <HAL_DMA_Init+0xac>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	009a      	lsls	r2, r3, #2
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <HAL_DMA_Init+0xb0>)
 8001522:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2202      	movs	r2, #2
 8001528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800153a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800153e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	bffdfff8 	.word	0xbffdfff8
 800159c:	cccccccd 	.word	0xcccccccd
 80015a0:	40020000 	.word	0x40020000

080015a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_DMA_Start_IT+0x20>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e04b      	b.n	800165c <HAL_DMA_Start_IT+0xb8>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d13a      	bne.n	800164e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f937 	bl	8001870 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	2b00      	cmp	r3, #0
 8001608:	d008      	beq.n	800161c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 020e 	orr.w	r2, r2, #14
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e00f      	b.n	800163c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0204 	bic.w	r2, r2, #4
 800162a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 020a 	orr.w	r2, r2, #10
 800163a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e005      	b.n	800165a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001656:	2302      	movs	r3, #2
 8001658:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800165a:	7dfb      	ldrb	r3, [r7, #23]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	2204      	movs	r2, #4
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d04f      	beq.n	800172c <HAL_DMA_IRQHandler+0xc8>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	d04a      	beq.n	800172c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0204 	bic.w	r2, r2, #4
 80016b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a66      	ldr	r2, [pc, #408]	; (8001854 <HAL_DMA_IRQHandler+0x1f0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d029      	beq.n	8001712 <HAL_DMA_IRQHandler+0xae>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a65      	ldr	r2, [pc, #404]	; (8001858 <HAL_DMA_IRQHandler+0x1f4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d022      	beq.n	800170e <HAL_DMA_IRQHandler+0xaa>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a63      	ldr	r2, [pc, #396]	; (800185c <HAL_DMA_IRQHandler+0x1f8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01a      	beq.n	8001708 <HAL_DMA_IRQHandler+0xa4>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a62      	ldr	r2, [pc, #392]	; (8001860 <HAL_DMA_IRQHandler+0x1fc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d012      	beq.n	8001702 <HAL_DMA_IRQHandler+0x9e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a60      	ldr	r2, [pc, #384]	; (8001864 <HAL_DMA_IRQHandler+0x200>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00a      	beq.n	80016fc <HAL_DMA_IRQHandler+0x98>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a5f      	ldr	r2, [pc, #380]	; (8001868 <HAL_DMA_IRQHandler+0x204>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d102      	bne.n	80016f6 <HAL_DMA_IRQHandler+0x92>
 80016f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f4:	e00e      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 80016f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016fa:	e00b      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 80016fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001700:	e008      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 8001702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001706:	e005      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 8001708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170c:	e002      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 800170e:	2340      	movs	r3, #64	; 0x40
 8001710:	e000      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 8001712:	2304      	movs	r3, #4
 8001714:	4a55      	ldr	r2, [pc, #340]	; (800186c <HAL_DMA_IRQHandler+0x208>)
 8001716:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8094 	beq.w	800184a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800172a:	e08e      	b.n	800184a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2202      	movs	r2, #2
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d056      	beq.n	80017ea <HAL_DMA_IRQHandler+0x186>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d051      	beq.n	80017ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10b      	bne.n	800176c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 020a 	bic.w	r2, r2, #10
 8001762:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a38      	ldr	r2, [pc, #224]	; (8001854 <HAL_DMA_IRQHandler+0x1f0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d029      	beq.n	80017ca <HAL_DMA_IRQHandler+0x166>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a37      	ldr	r2, [pc, #220]	; (8001858 <HAL_DMA_IRQHandler+0x1f4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d022      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x162>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a35      	ldr	r2, [pc, #212]	; (800185c <HAL_DMA_IRQHandler+0x1f8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01a      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x15c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a34      	ldr	r2, [pc, #208]	; (8001860 <HAL_DMA_IRQHandler+0x1fc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d012      	beq.n	80017ba <HAL_DMA_IRQHandler+0x156>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a32      	ldr	r2, [pc, #200]	; (8001864 <HAL_DMA_IRQHandler+0x200>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x150>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a31      	ldr	r2, [pc, #196]	; (8001868 <HAL_DMA_IRQHandler+0x204>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d102      	bne.n	80017ae <HAL_DMA_IRQHandler+0x14a>
 80017a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017ac:	e00e      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b2:	e00b      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b8:	e008      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017be:	e005      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c4:	e002      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017c6:	2320      	movs	r3, #32
 80017c8:	e000      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017ca:	2302      	movs	r3, #2
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <HAL_DMA_IRQHandler+0x208>)
 80017ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d034      	beq.n	800184a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017e8:	e02f      	b.n	800184a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2208      	movs	r2, #8
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d028      	beq.n	800184c <HAL_DMA_IRQHandler+0x1e8>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d023      	beq.n	800184c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020e 	bic.w	r2, r2, #14
 8001812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	2b00      	cmp	r3, #0
 8001840:	d004      	beq.n	800184c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
    }
  }
  return;
 800184a:	bf00      	nop
 800184c:	bf00      	nop
}
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40020008 	.word	0x40020008
 8001858:	4002001c 	.word	0x4002001c
 800185c:	40020030 	.word	0x40020030
 8001860:	40020044 	.word	0x40020044
 8001864:	40020058 	.word	0x40020058
 8001868:	4002006c 	.word	0x4002006c
 800186c:	40020000 	.word	0x40020000

08001870 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d108      	bne.n	80018b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018ae:	e007      	b.n	80018c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	60da      	str	r2, [r3, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	e169      	b.n	8001bb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e0:	2201      	movs	r2, #1
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8158 	bne.w	8001bae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a9a      	ldr	r2, [pc, #616]	; (8001b6c <HAL_GPIO_Init+0x2a0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d05e      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001908:	4a98      	ldr	r2, [pc, #608]	; (8001b6c <HAL_GPIO_Init+0x2a0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d875      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800190e:	4a98      	ldr	r2, [pc, #608]	; (8001b70 <HAL_GPIO_Init+0x2a4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d058      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001914:	4a96      	ldr	r2, [pc, #600]	; (8001b70 <HAL_GPIO_Init+0x2a4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d86f      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800191a:	4a96      	ldr	r2, [pc, #600]	; (8001b74 <HAL_GPIO_Init+0x2a8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d052      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001920:	4a94      	ldr	r2, [pc, #592]	; (8001b74 <HAL_GPIO_Init+0x2a8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d869      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001926:	4a94      	ldr	r2, [pc, #592]	; (8001b78 <HAL_GPIO_Init+0x2ac>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d04c      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 800192c:	4a92      	ldr	r2, [pc, #584]	; (8001b78 <HAL_GPIO_Init+0x2ac>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d863      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001932:	4a92      	ldr	r2, [pc, #584]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d046      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001938:	4a90      	ldr	r2, [pc, #576]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d85d      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800193e:	2b12      	cmp	r3, #18
 8001940:	d82a      	bhi.n	8001998 <HAL_GPIO_Init+0xcc>
 8001942:	2b12      	cmp	r3, #18
 8001944:	d859      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001946:	a201      	add	r2, pc, #4	; (adr r2, 800194c <HAL_GPIO_Init+0x80>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	080019c7 	.word	0x080019c7
 8001950:	080019a1 	.word	0x080019a1
 8001954:	080019b3 	.word	0x080019b3
 8001958:	080019f5 	.word	0x080019f5
 800195c:	080019fb 	.word	0x080019fb
 8001960:	080019fb 	.word	0x080019fb
 8001964:	080019fb 	.word	0x080019fb
 8001968:	080019fb 	.word	0x080019fb
 800196c:	080019fb 	.word	0x080019fb
 8001970:	080019fb 	.word	0x080019fb
 8001974:	080019fb 	.word	0x080019fb
 8001978:	080019fb 	.word	0x080019fb
 800197c:	080019fb 	.word	0x080019fb
 8001980:	080019fb 	.word	0x080019fb
 8001984:	080019fb 	.word	0x080019fb
 8001988:	080019fb 	.word	0x080019fb
 800198c:	080019fb 	.word	0x080019fb
 8001990:	080019a9 	.word	0x080019a9
 8001994:	080019bd 	.word	0x080019bd
 8001998:	4a79      	ldr	r2, [pc, #484]	; (8001b80 <HAL_GPIO_Init+0x2b4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800199e:	e02c      	b.n	80019fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e029      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	3304      	adds	r3, #4
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e024      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	3308      	adds	r3, #8
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e01f      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	330c      	adds	r3, #12
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e01a      	b.n	80019fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ce:	2304      	movs	r3, #4
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e013      	b.n	80019fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	611a      	str	r2, [r3, #16]
          break;
 80019e6:	e009      	b.n	80019fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e8:	2308      	movs	r3, #8
 80019ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	615a      	str	r2, [r3, #20]
          break;
 80019f2:	e003      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_Init+0x130>
          break;
 80019fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d801      	bhi.n	8001a06 <HAL_GPIO_Init+0x13a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_Init+0x13e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2bff      	cmp	r3, #255	; 0xff
 8001a10:	d802      	bhi.n	8001a18 <HAL_GPIO_Init+0x14c>
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	e002      	b.n	8001a1e <HAL_GPIO_Init+0x152>
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	3b08      	subs	r3, #8
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	210f      	movs	r1, #15
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	6a39      	ldr	r1, [r7, #32]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80b1 	beq.w	8001bae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4c:	4b4d      	ldr	r3, [pc, #308]	; (8001b84 <HAL_GPIO_Init+0x2b8>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a4c      	ldr	r2, [pc, #304]	; (8001b84 <HAL_GPIO_Init+0x2b8>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_GPIO_Init+0x2b8>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a64:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <HAL_GPIO_Init+0x2bc>)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a40      	ldr	r2, [pc, #256]	; (8001b8c <HAL_GPIO_Init+0x2c0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d013      	beq.n	8001ab8 <HAL_GPIO_Init+0x1ec>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3f      	ldr	r2, [pc, #252]	; (8001b90 <HAL_GPIO_Init+0x2c4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d00d      	beq.n	8001ab4 <HAL_GPIO_Init+0x1e8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a3e      	ldr	r2, [pc, #248]	; (8001b94 <HAL_GPIO_Init+0x2c8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d007      	beq.n	8001ab0 <HAL_GPIO_Init+0x1e4>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a3d      	ldr	r2, [pc, #244]	; (8001b98 <HAL_GPIO_Init+0x2cc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_GPIO_Init+0x1e0>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e006      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001aac:	2304      	movs	r3, #4
 8001aae:	e004      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e002      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abc:	f002 0203 	and.w	r2, r2, #3
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	4093      	lsls	r3, r2
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aca:	492f      	ldr	r1, [pc, #188]	; (8001b88 <HAL_GPIO_Init+0x2bc>)
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	492c      	ldr	r1, [pc, #176]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af2:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4928      	ldr	r1, [pc, #160]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	4922      	ldr	r1, [pc, #136]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	491e      	ldr	r1, [pc, #120]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b34:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4918      	ldr	r1, [pc, #96]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	4914      	ldr	r1, [pc, #80]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d021      	beq.n	8001ba0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	490e      	ldr	r1, [pc, #56]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
 8001b68:	e021      	b.n	8001bae <HAL_GPIO_Init+0x2e2>
 8001b6a:	bf00      	nop
 8001b6c:	10320000 	.word	0x10320000
 8001b70:	10310000 	.word	0x10310000
 8001b74:	10220000 	.word	0x10220000
 8001b78:	10210000 	.word	0x10210000
 8001b7c:	10120000 	.word	0x10120000
 8001b80:	10110000 	.word	0x10110000
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	40010800 	.word	0x40010800
 8001b90:	40010c00 	.word	0x40010c00
 8001b94:	40011000 	.word	0x40011000
 8001b98:	40011400 	.word	0x40011400
 8001b9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	4909      	ldr	r1, [pc, #36]	; (8001bd0 <HAL_GPIO_Init+0x304>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f47f ae8e 	bne.w	80018e0 <HAL_GPIO_Init+0x14>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	372c      	adds	r7, #44	; 0x2c
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43d9      	mvns	r1, r3
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	400b      	ands	r3, r1
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fb1a 	bl	8000290 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e12b      	b.n	8001ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7fe ff6a 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2224      	movs	r2, #36	; 0x24
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ccc:	f001 f832 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a81      	ldr	r2, [pc, #516]	; (8001edc <HAL_I2C_Init+0x274>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d807      	bhi.n	8001cec <HAL_I2C_Init+0x84>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a80      	ldr	r2, [pc, #512]	; (8001ee0 <HAL_I2C_Init+0x278>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	bf94      	ite	ls
 8001ce4:	2301      	movls	r3, #1
 8001ce6:	2300      	movhi	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e006      	b.n	8001cfa <HAL_I2C_Init+0x92>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a7d      	ldr	r2, [pc, #500]	; (8001ee4 <HAL_I2C_Init+0x27c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	bf94      	ite	ls
 8001cf4:	2301      	movls	r3, #1
 8001cf6:	2300      	movhi	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0e7      	b.n	8001ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4a78      	ldr	r2, [pc, #480]	; (8001ee8 <HAL_I2C_Init+0x280>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9b      	lsrs	r3, r3, #18
 8001d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a6a      	ldr	r2, [pc, #424]	; (8001edc <HAL_I2C_Init+0x274>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d802      	bhi.n	8001d3c <HAL_I2C_Init+0xd4>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	e009      	b.n	8001d50 <HAL_I2C_Init+0xe8>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	4a69      	ldr	r2, [pc, #420]	; (8001eec <HAL_I2C_Init+0x284>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	3301      	adds	r3, #1
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	495c      	ldr	r1, [pc, #368]	; (8001edc <HAL_I2C_Init+0x274>)
 8001d6c:	428b      	cmp	r3, r1
 8001d6e:	d819      	bhi.n	8001da4 <HAL_I2C_Init+0x13c>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e59      	subs	r1, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7e:	1c59      	adds	r1, r3, #1
 8001d80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d84:	400b      	ands	r3, r1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_I2C_Init+0x138>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1e59      	subs	r1, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9e:	e051      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e04f      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d111      	bne.n	8001dd0 <HAL_I2C_Init+0x168>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e58      	subs	r0, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	440b      	add	r3, r1
 8001dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e012      	b.n	8001df6 <HAL_I2C_Init+0x18e>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1e58      	subs	r0, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	0099      	lsls	r1, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de6:	3301      	adds	r3, #1
 8001de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Init+0x196>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e022      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10e      	bne.n	8001e24 <HAL_I2C_Init+0x1bc>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1e58      	subs	r0, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6859      	ldr	r1, [r3, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	440b      	add	r3, r1
 8001e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e22:	e00f      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	0099      	lsls	r1, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	6809      	ldr	r1, [r1, #0]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6911      	ldr	r1, [r2, #16]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68d2      	ldr	r2, [r2, #12]
 8001e7e:	4311      	orrs	r1, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	000186a0 	.word	0x000186a0
 8001ee0:	001e847f 	.word	0x001e847f
 8001ee4:	003d08ff 	.word	0x003d08ff
 8001ee8:	431bde83 	.word	0x431bde83
 8001eec:	10624dd3 	.word	0x10624dd3

08001ef0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	461a      	mov	r2, r3
 8001efc:	460b      	mov	r3, r1
 8001efe:	817b      	strh	r3, [r7, #10]
 8001f00:	4613      	mov	r3, r2
 8001f02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7fe ffa6 	bl	8000e54 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	f040 80e0 	bne.w	80020d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2319      	movs	r3, #25
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4970      	ldr	r1, [pc, #448]	; (80020e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f964 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e0d3      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_I2C_Master_Transmit+0x50>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e0cc      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d007      	beq.n	8001f66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2221      	movs	r2, #33	; 0x21
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2210      	movs	r2, #16
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	893a      	ldrh	r2, [r7, #8]
 8001f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4a50      	ldr	r2, [pc, #320]	; (80020e8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fa8:	8979      	ldrh	r1, [r7, #10]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	6a3a      	ldr	r2, [r7, #32]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f89c 	bl	80020ec <I2C_MasterRequestWrite>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e08d      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fd4:	e066      	b.n	80020a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fa22 	bl	8002424 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d107      	bne.n	8001ffe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06b      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201c:	b29b      	uxth	r3, r3
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b04      	cmp	r3, #4
 800203e:	d11b      	bne.n	8002078 <HAL_I2C_Master_Transmit+0x188>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	d017      	beq.n	8002078 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	6a39      	ldr	r1, [r7, #32]
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 fa19 	bl	80024b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00d      	beq.n	80020a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	2b04      	cmp	r3, #4
 800208e:	d107      	bne.n	80020a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e01a      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d194      	bne.n	8001fd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e000      	b.n	80020da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020d8:	2302      	movs	r3, #2
  }
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	00100002 	.word	0x00100002
 80020e8:	ffff0000 	.word	0xffff0000

080020ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	460b      	mov	r3, r1
 80020fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d006      	beq.n	8002116 <I2C_MasterRequestWrite+0x2a>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d003      	beq.n	8002116 <I2C_MasterRequestWrite+0x2a>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002114:	d108      	bne.n	8002128 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e00b      	b.n	8002140 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	2b12      	cmp	r3, #18
 800212e:	d107      	bne.n	8002140 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800213e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f84f 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002166:	d103      	bne.n	8002170 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e035      	b.n	80021e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800217c:	d108      	bne.n	8002190 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800217e:	897b      	ldrh	r3, [r7, #10]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	e01b      	b.n	80021c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002190:	897b      	ldrh	r3, [r7, #10]
 8002192:	11db      	asrs	r3, r3, #7
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f003 0306 	and.w	r3, r3, #6
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f063 030f 	orn	r3, r3, #15
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	490e      	ldr	r1, [pc, #56]	; (80021e8 <I2C_MasterRequestWrite+0xfc>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f898 	bl	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e010      	b.n	80021e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021be:	897b      	ldrh	r3, [r7, #10]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4907      	ldr	r1, [pc, #28]	; (80021ec <I2C_MasterRequestWrite+0x100>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f888 	bl	80022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	00010008 	.word	0x00010008
 80021ec:	00010002 	.word	0x00010002

080021f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002200:	e048      	b.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d044      	beq.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220a:	f7fe fe23 	bl	8000e54 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d302      	bcc.n	8002220 <I2C_WaitOnFlagUntilTimeout+0x30>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d139      	bne.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	0c1b      	lsrs	r3, r3, #16
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10d      	bne.n	8002246 <I2C_WaitOnFlagUntilTimeout+0x56>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	43da      	mvns	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	e00c      	b.n	8002260 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	43da      	mvns	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4013      	ands	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	429a      	cmp	r2, r3
 8002264:	d116      	bne.n	8002294 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e023      	b.n	80022dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0c1b      	lsrs	r3, r3, #16
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10d      	bne.n	80022ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	43da      	mvns	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	e00c      	b.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	43da      	mvns	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4013      	ands	r3, r2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d093      	beq.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022f2:	e071      	b.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002302:	d123      	bne.n	800234c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002312:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800231c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f043 0204 	orr.w	r2, r3, #4
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e067      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d041      	beq.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002354:	f7fe fd7e 	bl	8000e54 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d302      	bcc.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d136      	bne.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10c      	bne.n	800238e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	e00b      	b.n	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	43da      	mvns	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4013      	ands	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e021      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	0c1b      	lsrs	r3, r3, #16
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10c      	bne.n	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	e00b      	b.n	8002414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4013      	ands	r3, r2
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f af6d 	bne.w	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002430:	e034      	b.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f886 	bl	8002544 <I2C_IsAcknowledgeFailed>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e034      	b.n	80024ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d028      	beq.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7fe fd03 	bl	8000e54 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d11d      	bne.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b80      	cmp	r3, #128	; 0x80
 800246c:	d016      	beq.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e007      	b.n	80024ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d1c3      	bne.n	8002432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024c0:	e034      	b.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f83e 	bl	8002544 <I2C_IsAcknowledgeFailed>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e034      	b.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d028      	beq.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024da:	f7fe fcbb 	bl	8000e54 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d11d      	bne.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d016      	beq.n	800252c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e007      	b.n	800253c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d1c3      	bne.n	80024c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255a:	d11b      	bne.n	8002594 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002564:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e272      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c0:	4b92      	ldr	r3, [pc, #584]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d00c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025cc:	4b8f      	ldr	r3, [pc, #572]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d112      	bne.n	80025fe <HAL_RCC_OscConfig+0x5e>
 80025d8:	4b8c      	ldr	r3, [pc, #560]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d10b      	bne.n	80025fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e6:	4b89      	ldr	r3, [pc, #548]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06c      	beq.n	80026cc <HAL_RCC_OscConfig+0x12c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d168      	bne.n	80026cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e24c      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x76>
 8002608:	4b80      	ldr	r3, [pc, #512]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a7f      	ldr	r2, [pc, #508]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e02e      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x98>
 800261e:	4b7b      	ldr	r3, [pc, #492]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7a      	ldr	r2, [pc, #488]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b78      	ldr	r3, [pc, #480]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a77      	ldr	r2, [pc, #476]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0xbc>
 8002642:	4b72      	ldr	r3, [pc, #456]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a71      	ldr	r2, [pc, #452]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a6e      	ldr	r2, [pc, #440]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xd4>
 800265c:	4b6b      	ldr	r3, [pc, #428]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6a      	ldr	r2, [pc, #424]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a67      	ldr	r2, [pc, #412]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fbea 	bl	8000e54 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fbe6 	bl	8000e54 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e200      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b5d      	ldr	r3, [pc, #372]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xe4>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fbd6 	bl	8000e54 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe fbd2 	bl	8000e54 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1ec      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x10c>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026da:	4b4c      	ldr	r3, [pc, #304]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x18c>
 80026f2:	4b46      	ldr	r3, [pc, #280]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x176>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1c0      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4939      	ldr	r1, [pc, #228]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e03a      	b.n	80027a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d020      	beq.n	8002776 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_RCC_OscConfig+0x270>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe fb8b 	bl	8000e54 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe fb87 	bl	8000e54 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1a1      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4927      	ldr	r1, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_RCC_OscConfig+0x270>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fb6a 	bl	8000e54 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002784:	f7fe fb66 	bl	8000e54 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e180      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d03a      	beq.n	8002824 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d019      	beq.n	80027ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b6:	4b17      	ldr	r3, [pc, #92]	; (8002814 <HAL_RCC_OscConfig+0x274>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7fe fb4a 	bl	8000e54 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe fb46 	bl	8000e54 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e160      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027e2:	2001      	movs	r0, #1
 80027e4:	f000 face 	bl	8002d84 <RCC_Delay>
 80027e8:	e01c      	b.n	8002824 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_OscConfig+0x274>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f0:	f7fe fb30 	bl	8000e54 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f6:	e00f      	b.n	8002818 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe fb2c 	bl	8000e54 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d908      	bls.n	8002818 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e146      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	42420000 	.word	0x42420000
 8002814:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b92      	ldr	r3, [pc, #584]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e9      	bne.n	80027f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a6 	beq.w	800297e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b8b      	ldr	r3, [pc, #556]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4b88      	ldr	r3, [pc, #544]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a87      	ldr	r2, [pc, #540]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284c:	61d3      	str	r3, [r2, #28]
 800284e:	4b85      	ldr	r3, [pc, #532]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d118      	bne.n	800289c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7e      	ldr	r2, [pc, #504]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe faed 	bl	8000e54 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7fe fae9 	bl	8000e54 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b64      	cmp	r3, #100	; 0x64
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e103      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <HAL_RCC_OscConfig+0x4c8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x312>
 80028a4:	4b6f      	ldr	r3, [pc, #444]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a6e      	ldr	r2, [pc, #440]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	e02d      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x334>
 80028ba:	4b6a      	ldr	r3, [pc, #424]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a69      	ldr	r2, [pc, #420]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	6213      	str	r3, [r2, #32]
 80028c6:	4b67      	ldr	r3, [pc, #412]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4a66      	ldr	r2, [pc, #408]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	6213      	str	r3, [r2, #32]
 80028d2:	e01c      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x356>
 80028dc:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a60      	ldr	r2, [pc, #384]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	4b5e      	ldr	r3, [pc, #376]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a5d      	ldr	r2, [pc, #372]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	e00b      	b.n	800290e <HAL_RCC_OscConfig+0x36e>
 80028f6:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a5a      	ldr	r2, [pc, #360]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	4b58      	ldr	r3, [pc, #352]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a57      	ldr	r2, [pc, #348]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d015      	beq.n	8002942 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fa9d 	bl	8000e54 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fa99 	bl	8000e54 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0b1      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ee      	beq.n	800291e <HAL_RCC_OscConfig+0x37e>
 8002940:	e014      	b.n	800296c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002942:	f7fe fa87 	bl	8000e54 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe fa83 	bl	8000e54 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e09b      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ee      	bne.n	800294a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d105      	bne.n	800297e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a3b      	ldr	r2, [pc, #236]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8087 	beq.w	8002a96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d061      	beq.n	8002a58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d146      	bne.n	8002a2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299c:	4b33      	ldr	r3, [pc, #204]	; (8002a6c <HAL_RCC_OscConfig+0x4cc>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fa57 	bl	8000e54 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fa53 	bl	8000e54 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e06d      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	4921      	ldr	r1, [pc, #132]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e4:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a19      	ldr	r1, [r3, #32]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	430b      	orrs	r3, r1
 80029f6:	491b      	ldr	r1, [pc, #108]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCC_OscConfig+0x4cc>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe fa27 	bl	8000e54 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0a:	f7fe fa23 	bl	8000e54 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e03d      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x46a>
 8002a28:	e035      	b.n	8002a96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_RCC_OscConfig+0x4cc>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fa10 	bl	8000e54 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fa0c 	bl	8000e54 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e026      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x498>
 8002a56:	e01e      	b.n	8002a96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e019      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40007000 	.word	0x40007000
 8002a6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_OscConfig+0x500>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0d0      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4965      	ldr	r1, [pc, #404]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0b8      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b00:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	494d      	ldr	r1, [pc, #308]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d040      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d115      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e07f      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b62:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e073      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06b      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4936      	ldr	r1, [pc, #216]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b94:	f7fe f95e 	bl	8000e54 <HAL_GetTick>
 8002b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9c:	f7fe f95a 	bl	8000e54 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e053      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 020c 	and.w	r2, r3, #12
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d1eb      	bne.n	8002b9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d210      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4922      	ldr	r1, [pc, #136]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e032      	b.n	8002c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c00:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4916      	ldr	r1, [pc, #88]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	490e      	ldr	r1, [pc, #56]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c32:	f000 f821 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 8002c36:	4602      	mov	r2, r0
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	490a      	ldr	r1, [pc, #40]	; (8002c6c <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	5ccb      	ldrb	r3, [r1, r3]
 8002c46:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_RCC_ClockConfig+0x1cc>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_ClockConfig+0x1d0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe f8bc 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	08003a7c 	.word	0x08003a7c
 8002c70:	2000062c 	.word	0x2000062c
 8002c74:	20000630 	.word	0x20000630

08002c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d002      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x36>
 8002ca6:	e027      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002caa:	613b      	str	r3, [r7, #16]
      break;
 8002cac:	e027      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	0c9b      	lsrs	r3, r3, #18
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
 8002cba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d010      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	0c5b      	lsrs	r3, r3, #17
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	4a11      	ldr	r2, [pc, #68]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cda:	fb03 f202 	mul.w	r2, r3, r2
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e004      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cec:	fb02 f303 	mul.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	613b      	str	r3, [r7, #16]
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cfa:	613b      	str	r3, [r7, #16]
      break;
 8002cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfe:	693b      	ldr	r3, [r7, #16]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	007a1200 	.word	0x007a1200
 8002d14:	08003a94 	.word	0x08003a94
 8002d18:	08003aa4 	.word	0x08003aa4
 8002d1c:	003d0900 	.word	0x003d0900

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	2000062c 	.word	0x2000062c

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d38:	f7ff fff2 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4903      	ldr	r1, [pc, #12]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08003a8c 	.word	0x08003a8c

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d60:	f7ff ffde 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	0adb      	lsrs	r3, r3, #11
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4903      	ldr	r1, [pc, #12]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	08003a8c 	.word	0x08003a8c

08002d84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <RCC_Delay+0x34>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <RCC_Delay+0x38>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	0a5b      	lsrs	r3, r3, #9
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002da0:	bf00      	nop
  }
  while (Delay --);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1e5a      	subs	r2, r3, #1
 8002da6:	60fa      	str	r2, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f9      	bne.n	8002da0 <RCC_Delay+0x1c>
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	2000062c 	.word	0x2000062c
 8002dbc:	10624dd3 	.word	0x10624dd3

08002dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d07d      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de0:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	4a4b      	ldr	r2, [pc, #300]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df6:	61d3      	str	r3, [r2, #28]
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e04:	2301      	movs	r3, #1
 8002e06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d118      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e14:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a42      	ldr	r2, [pc, #264]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e20:	f7fe f818 	bl	8000e54 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e26:	e008      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e28:	f7fe f814 	bl	8000e54 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e06d      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e46:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d02e      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d027      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e64:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e6e:	4b2e      	ldr	r3, [pc, #184]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e74:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e7a:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d014      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7fd ffe3 	bl	8000e54 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fd ffdf 	bl	8000e54 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e036      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ee      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4917      	ldr	r1, [pc, #92]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	490b      	ldr	r1, [pc, #44]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4904      	ldr	r1, [pc, #16]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42420440 	.word	0x42420440

08002f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e042      	b.n	8002fc4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd fe46 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fb81 	bl	8003678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d16d      	bne.n	80030c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_UART_Transmit+0x2c>
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e066      	b.n	80030ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2221      	movs	r2, #33	; 0x21
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300a:	f7fd ff23 	bl	8000e54 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003024:	d108      	bne.n	8003038 <HAL_UART_Transmit+0x6c>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d104      	bne.n	8003038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e003      	b.n	8003040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003040:	e02a      	b.n	8003098 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f980 	bl	8003352 <UART_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e036      	b.n	80030ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10b      	bne.n	800307a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	3302      	adds	r3, #2
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	e007      	b.n	800308a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	3301      	adds	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1cf      	bne.n	8003042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2200      	movs	r2, #0
 80030aa:	2140      	movs	r1, #64	; 0x40
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f950 	bl	8003352 <UART_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e006      	b.n	80030ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	4613      	mov	r3, r2
 80030de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d112      	bne.n	8003112 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_UART_Receive_DMA+0x26>
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e00b      	b.n	8003114 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	461a      	mov	r2, r3
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f991 	bl	8003430 <UART_Start_Receive_DMA>
 800310e:	4603      	mov	r3, r0
 8003110:	e000      	b.n	8003114 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003112:	2302      	movs	r3, #2
  }
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b09c      	sub	sp, #112	; 0x70
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d172      	bne.n	8003258 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	2200      	movs	r2, #0
 8003176:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800318e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003198:	65ba      	str	r2, [r7, #88]	; 0x58
 800319a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800319e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e5      	bne.n	8003178 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3314      	adds	r3, #20
 80031b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	667b      	str	r3, [r7, #100]	; 0x64
 80031c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3314      	adds	r3, #20
 80031ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80031cc:	647a      	str	r2, [r7, #68]	; 0x44
 80031ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e5      	bne.n	80031ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	623b      	str	r3, [r7, #32]
   return(result);
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f6:	663b      	str	r3, [r7, #96]	; 0x60
 80031f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3314      	adds	r3, #20
 80031fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003200:	633a      	str	r2, [r7, #48]	; 0x30
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e5      	bne.n	80031e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800321c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	2b01      	cmp	r3, #1
 8003222:	d119      	bne.n	8003258 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	e853 3f00 	ldrex	r3, [r3]
 8003232:	60fb      	str	r3, [r7, #12]
   return(result);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0310 	bic.w	r3, r3, #16
 800323a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800323c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	330c      	adds	r3, #12
 8003242:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003244:	61fa      	str	r2, [r7, #28]
 8003246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	69b9      	ldr	r1, [r7, #24]
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	e841 2300 	strex	r3, r2, [r1]
 8003250:	617b      	str	r3, [r7, #20]
   return(result);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e5      	bne.n	8003224 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325a:	2200      	movs	r2, #0
 800325c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	2b01      	cmp	r3, #1
 8003264:	d106      	bne.n	8003274 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003268:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800326a:	4619      	mov	r1, r3
 800326c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800326e:	f7ff ff67 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003272:	e002      	b.n	800327a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003274:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003276:	f7fd f833 	bl	80002e0 <HAL_UART_RxCpltCallback>
}
 800327a:	bf00      	nop
 800327c:	3770      	adds	r7, #112	; 0x70
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	2b01      	cmp	r3, #1
 800329c:	d108      	bne.n	80032b0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff ff49 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032ae:	e002      	b.n	80032b6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f7ff ff33 	bl	800311c <HAL_UART_RxHalfCpltCallback>
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b21      	cmp	r3, #33	; 0x21
 80032f0:	d108      	bne.n	8003304 <UART_DMAError+0x46>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2200      	movs	r2, #0
 80032fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80032fe:	68b8      	ldr	r0, [r7, #8]
 8003300:	f000 f930 	bl	8003564 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b22      	cmp	r3, #34	; 0x22
 8003324:	d108      	bne.n	8003338 <UART_DMAError+0x7a>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2200      	movs	r2, #0
 8003330:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003332:	68b8      	ldr	r0, [r7, #8]
 8003334:	f000 f93d 	bl	80035b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f043 0210 	orr.w	r2, r3, #16
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003344:	68b8      	ldr	r0, [r7, #8]
 8003346:	f7ff fef2 	bl	800312e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b090      	sub	sp, #64	; 0x40
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003362:	e050      	b.n	8003406 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d04c      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800336c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <UART_WaitOnFlagUntilTimeout+0x30>
 8003372:	f7fd fd6f 	bl	8000e54 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800337e:	429a      	cmp	r2, r3
 8003380:	d241      	bcs.n	8003406 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a2:	637a      	str	r2, [r7, #52]	; 0x34
 80033a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e5      	bne.n	8003382 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3314      	adds	r3, #20
 80033bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	613b      	str	r3, [r7, #16]
   return(result);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3314      	adds	r3, #20
 80033d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033d6:	623a      	str	r2, [r7, #32]
 80033d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	69f9      	ldr	r1, [r7, #28]
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e5      	bne.n	80033b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e00f      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	429a      	cmp	r2, r3
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	429a      	cmp	r2, r3
 8003422:	d09f      	beq.n	8003364 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3740      	adds	r7, #64	; 0x40
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b098      	sub	sp, #96	; 0x60
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2222      	movs	r2, #34	; 0x22
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	4a3e      	ldr	r2, [pc, #248]	; (8003558 <UART_Start_Receive_DMA+0x128>)
 800345e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	4a3d      	ldr	r2, [pc, #244]	; (800355c <UART_Start_Receive_DMA+0x12c>)
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346c:	4a3c      	ldr	r2, [pc, #240]	; (8003560 <UART_Start_Receive_DMA+0x130>)
 800346e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	2200      	movs	r2, #0
 8003476:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003478:	f107 0308 	add.w	r3, r7, #8
 800347c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	f7fe f888 	bl	80015a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d019      	beq.n	80034e6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	330c      	adds	r3, #12
 80034b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80034d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80034d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80034e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e5      	bne.n	80034b2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3314      	adds	r3, #20
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	657b      	str	r3, [r7, #84]	; 0x54
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3314      	adds	r3, #20
 8003504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003506:	63ba      	str	r2, [r7, #56]	; 0x38
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800350c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e5      	bne.n	80034e6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3314      	adds	r3, #20
 8003520:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	617b      	str	r3, [r7, #20]
   return(result);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003530:	653b      	str	r3, [r7, #80]	; 0x50
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3314      	adds	r3, #20
 8003538:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800353a:	627a      	str	r2, [r7, #36]	; 0x24
 800353c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6a39      	ldr	r1, [r7, #32]
 8003540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	61fb      	str	r3, [r7, #28]
   return(result);
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e5      	bne.n	800351a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3760      	adds	r7, #96	; 0x60
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	08003157 	.word	0x08003157
 800355c:	08003283 	.word	0x08003283
 8003560:	080032bf 	.word	0x080032bf

08003564 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	330c      	adds	r3, #12
 8003572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	60bb      	str	r3, [r7, #8]
   return(result);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	61ba      	str	r2, [r7, #24]
 800358e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	6979      	ldr	r1, [r7, #20]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	613b      	str	r3, [r7, #16]
   return(result);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e5      	bne.n	800356c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80035a8:	bf00      	nop
 80035aa:	3724      	adds	r7, #36	; 0x24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr

080035b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b095      	sub	sp, #84	; 0x54
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
 80035d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035da:	643a      	str	r2, [r7, #64]	; 0x40
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e5      	bne.n	80035ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3314      	adds	r3, #20
 80035f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	64bb      	str	r3, [r7, #72]	; 0x48
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3314      	adds	r3, #20
 800360c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800360e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e5      	bne.n	80035ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	2b01      	cmp	r3, #1
 8003628:	d119      	bne.n	800365e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	330c      	adds	r3, #12
 8003630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	60bb      	str	r3, [r7, #8]
   return(result);
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f023 0310 	bic.w	r3, r3, #16
 8003640:	647b      	str	r3, [r7, #68]	; 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800364a:	61ba      	str	r2, [r7, #24]
 800364c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	613b      	str	r3, [r7, #16]
   return(result);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e5      	bne.n	800362a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800366c:	bf00      	nop
 800366e:	3754      	adds	r7, #84	; 0x54
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
	...

08003678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036b2:	f023 030c 	bic.w	r3, r3, #12
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	430b      	orrs	r3, r1
 80036be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2c      	ldr	r2, [pc, #176]	; (800378c <UART_SetConfig+0x114>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d103      	bne.n	80036e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036e0:	f7ff fb3c 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	e002      	b.n	80036ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036e8:	f7ff fb24 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 80036ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009a      	lsls	r2, r3, #2
 80036f8:	441a      	add	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	4a22      	ldr	r2, [pc, #136]	; (8003790 <UART_SetConfig+0x118>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	0119      	lsls	r1, r3, #4
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009a      	lsls	r2, r3, #2
 8003718:	441a      	add	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	fbb2 f2f3 	udiv	r2, r2, r3
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <UART_SetConfig+0x118>)
 8003726:	fba3 0302 	umull	r0, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2064      	movs	r0, #100	; 0x64
 800372e:	fb00 f303 	mul.w	r3, r0, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	3332      	adds	r3, #50	; 0x32
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <UART_SetConfig+0x118>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003744:	4419      	add	r1, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009a      	lsls	r2, r3, #2
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <UART_SetConfig+0x118>)
 800375e:	fba3 0302 	umull	r0, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2064      	movs	r0, #100	; 0x64
 8003766:	fb00 f303 	mul.w	r3, r0, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	; 0x32
 8003770:	4a07      	ldr	r2, [pc, #28]	; (8003790 <UART_SetConfig+0x118>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	f003 020f 	and.w	r2, r3, #15
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	440a      	add	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40013800 	.word	0x40013800
 8003790:	51eb851f 	.word	0x51eb851f

08003794 <lcd_i2c_init>:

#include "lcd_i2c.h"


void lcd_i2c_init(LCD_I2C_HandleTypeDef *p_LCD, I2C_HandleTypeDef *p_hi2c, uint8_t p_col, uint8_t p_row, uint8_t p_Slave_Address)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	460b      	mov	r3, r1
 80037a4:	71fb      	strb	r3, [r7, #7]
 80037a6:	4613      	mov	r3, r2
 80037a8:	71bb      	strb	r3, [r7, #6]
	p_LCD->SLAVE_ADDRESS = p_Slave_Address;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	7e3a      	ldrb	r2, [r7, #24]
 80037ae:	709a      	strb	r2, [r3, #2]
	p_LCD->LCD_Backlight_Value = lcd_backlight_on;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2208      	movs	r2, #8
 80037b4:	70da      	strb	r2, [r3, #3]
	p_LCD->LCD_Columns = p_col;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	79fa      	ldrb	r2, [r7, #7]
 80037ba:	701a      	strb	r2, [r3, #0]
	p_LCD->LCD_Rows = p_row;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	79ba      	ldrb	r2, [r7, #6]
 80037c0:	705a      	strb	r2, [r3, #1]
	p_LCD->hi2c = p_hi2c;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	609a      	str	r2, [r3, #8]
	p_LCD->LCD_Display_Option = lcd_display_on | lcd_cursor_off | lcd_blinkOff;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2204      	movs	r2, #4
 80037cc:	711a      	strb	r2, [r3, #4]


	//4 bit initialization
	HAL_Delay(40); 	//waiting for > 40ms
 80037ce:	2028      	movs	r0, #40	; 0x28
 80037d0:	f7fd fb4a 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 80037d4:	2130      	movs	r1, #48	; 0x30
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f847 	bl	800386a <lcd_send_cmd>
	HAL_Delay(5);  // waiting for >4.1ms
 80037dc:	2005      	movs	r0, #5
 80037de:	f7fd fb43 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 80037e2:	2130      	movs	r1, #48	; 0x30
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f840 	bl	800386a <lcd_send_cmd>
	HAL_Delay(1);  // waiting for >100us
 80037ea:	2001      	movs	r0, #1
 80037ec:	f7fd fb3c 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x30);
 80037f0:	2130      	movs	r1, #48	; 0x30
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f839 	bl	800386a <lcd_send_cmd>
	HAL_Delay(10);
 80037f8:	200a      	movs	r0, #10
 80037fa:	f7fd fb35 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x20);	//4 bit mode
 80037fe:	2120      	movs	r1, #32
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f832 	bl	800386a <lcd_send_cmd>
	HAL_Delay(10);
 8003806:	200a      	movs	r0, #10
 8003808:	f7fd fb2e 	bl	8000e68 <HAL_Delay>

	//display initialization
	lcd_send_cmd(p_LCD, 0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800380c:	2128      	movs	r1, #40	; 0x28
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f82b 	bl	800386a <lcd_send_cmd>
	HAL_Delay(1);
 8003814:	2001      	movs	r0, #1
 8003816:	f7fd fb27 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off		HAL_Delay(1);
 800381a:	2108      	movs	r1, #8
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f824 	bl	800386a <lcd_send_cmd>
	HAL_Delay(1);
 8003822:	2001      	movs	r0, #1
 8003824:	f7fd fb20 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x01);  // clear display
 8003828:	2101      	movs	r1, #1
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f81d 	bl	800386a <lcd_send_cmd>
	HAL_Delay(1);
 8003830:	2001      	movs	r0, #1
 8003832:	f7fd fb19 	bl	8000e68 <HAL_Delay>
	HAL_Delay(1);
 8003836:	2001      	movs	r0, #1
 8003838:	f7fd fb16 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd(p_LCD, 0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800383c:	2106      	movs	r1, #6
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f813 	bl	800386a <lcd_send_cmd>
	HAL_Delay(1);
 8003844:	2001      	movs	r0, #1
 8003846:	f7fd fb0f 	bl	8000e68 <HAL_Delay>
	lcd_send_cmd(p_LCD, lcd_displaycontrol | p_LCD -> LCD_Display_Option); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	791b      	ldrb	r3, [r3, #4]
 800384e:	f043 0308 	orr.w	r3, r3, #8
 8003852:	b2db      	uxtb	r3, r3
 8003854:	4619      	mov	r1, r3
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f807 	bl	800386a <lcd_send_cmd>
	HAL_Delay(1);
 800385c:	2001      	movs	r0, #1
 800385e:	f7fd fb03 	bl	8000e68 <HAL_Delay>
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <lcd_send_cmd>:

void lcd_send_cmd (LCD_I2C_HandleTypeDef *p_lcd, char cmd)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af02      	add	r7, sp, #8
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	460b      	mov	r3, r1
 8003874:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (cmd & 0xf0);
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	f023 030f 	bic.w	r3, r3, #15
 800387c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4) & 0xf0);
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0C;	//en=1, rs=0
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	f043 030c 	orr.w	r3, r3, #12
 800388a:	b2db      	uxtb	r3, r3
 800388c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x08;	//en=0, rs=0
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	b2db      	uxtb	r3, r3
 8003896:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;	//en=1, rs=0
 8003898:	7bbb      	ldrb	r3, [r7, #14]
 800389a:	f043 030c 	orr.w	r3, r3, #12
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;	//en=0, rs=1
 80038a2:	7bbb      	ldrb	r3, [r7, #14]
 80038a4:	f043 0308 	orr.w	r3, r3, #8
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_lcd->hi2c, p_lcd->SLAVE_ADDRESS, data_t, 4, 100);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6898      	ldr	r0, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	789b      	ldrb	r3, [r3, #2]
 80038b4:	b299      	uxth	r1, r3
 80038b6:	f107 0208 	add.w	r2, r7, #8
 80038ba:	2364      	movs	r3, #100	; 0x64
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2304      	movs	r3, #4
 80038c0:	f7fe fb16 	bl	8001ef0 <HAL_I2C_Master_Transmit>
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <lcd_send_data>:

void lcd_send_data (LCD_I2C_HandleTypeDef *p_LCD, char data)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	70fb      	strb	r3, [r7, #3]
	char data_h, data_l;
	uint8_t data_t[4];
	data_h = (data & 0xf0);
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f023 030f 	bic.w	r3, r3, #15
 80038de:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	73bb      	strb	r3, [r7, #14]

	data_t[0] = data_h | 0x0D; //en=1, rs=0
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	f043 030d 	orr.w	r3, r3, #13
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_h | 0x09; //en=0, rs=0
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	f043 0309 	orr.w	r3, r3, #9
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 80038fa:	7bbb      	ldrb	r3, [r7, #14]
 80038fc:	f043 030d 	orr.w	r3, r3, #13
 8003900:	b2db      	uxtb	r3, r3
 8003902:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8003904:	7bbb      	ldrb	r3, [r7, #14]
 8003906:	f043 0309 	orr.w	r3, r3, #9
 800390a:	b2db      	uxtb	r3, r3
 800390c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(p_LCD -> hi2c, p_LCD->SLAVE_ADDRESS, data_t, 4, 100);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6898      	ldr	r0, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	789b      	ldrb	r3, [r3, #2]
 8003916:	b299      	uxth	r1, r3
 8003918:	f107 0208 	add.w	r2, r7, #8
 800391c:	2364      	movs	r3, #100	; 0x64
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	2304      	movs	r3, #4
 8003922:	f7fe fae5 	bl	8001ef0 <HAL_I2C_Master_Transmit>
}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <lcd_set_cursor>:


void lcd_set_cursor(LCD_I2C_HandleTypeDef *p_LCD, uint8_t p_col, uint8_t p_row)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	70fb      	strb	r3, [r7, #3]
 800393c:	4613      	mov	r3, r2
 800393e:	70bb      	strb	r3, [r7, #2]
	uint8_t t_row_Offets[] = {0x00, 0x40, 0x14, 0x54};
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <lcd_set_cursor+0x50>)
 8003942:	60fb      	str	r3, [r7, #12]
	if(p_row > p_LCD->LCD_Rows) p_row = p_LCD->LCD_Rows - 1;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	78ba      	ldrb	r2, [r7, #2]
 800394a:	429a      	cmp	r2, r3
 800394c:	d903      	bls.n	8003956 <lcd_set_cursor+0x26>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	785b      	ldrb	r3, [r3, #1]
 8003952:	3b01      	subs	r3, #1
 8003954:	70bb      	strb	r3, [r7, #2]
	lcd_send_cmd(p_LCD, 0x80 | (p_col + t_row_Offets[p_row]));
 8003956:	78bb      	ldrb	r3, [r7, #2]
 8003958:	3310      	adds	r3, #16
 800395a:	443b      	add	r3, r7
 800395c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	4413      	add	r3, r2
 8003964:	b2db      	uxtb	r3, r3
 8003966:	b25b      	sxtb	r3, r3
 8003968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800396c:	b25b      	sxtb	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	4619      	mov	r1, r3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ff79 	bl	800386a <lcd_send_cmd>
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	54144000 	.word	0x54144000

08003984 <lcd_send_string>:

void lcd_send_string (LCD_I2C_HandleTypeDef *p_LCD, char *str)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data(p_LCD, *str++);
 800398e:	e007      	b.n	80039a0 <lcd_send_string+0x1c>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	603a      	str	r2, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff ff96 	bl	80038cc <lcd_send_data>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f3      	bne.n	8003990 <lcd_send_string+0xc>
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <lcd_clear>:

void lcd_clear (LCD_I2C_HandleTypeDef *p_LCD)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
	lcd_send_cmd(p_LCD, lcd_cleardisplay);
 80039ba:	2101      	movs	r1, #1
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff54 	bl	800386a <lcd_send_cmd>
	HAL_Delay(5);
 80039c2:	2005      	movs	r0, #5
 80039c4:	f7fd fa50 	bl	8000e68 <HAL_Delay>
	lcd_set_cursor(p_LCD, 0, 0);
 80039c8:	2200      	movs	r2, #0
 80039ca:	2100      	movs	r1, #0
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ffaf 	bl	8003930 <lcd_set_cursor>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <memset>:
 80039da:	4603      	mov	r3, r0
 80039dc:	4402      	add	r2, r0
 80039de:	4293      	cmp	r3, r2
 80039e0:	d100      	bne.n	80039e4 <memset+0xa>
 80039e2:	4770      	bx	lr
 80039e4:	f803 1b01 	strb.w	r1, [r3], #1
 80039e8:	e7f9      	b.n	80039de <memset+0x4>
	...

080039ec <__libc_init_array>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	2600      	movs	r6, #0
 80039f0:	4d0c      	ldr	r5, [pc, #48]	; (8003a24 <__libc_init_array+0x38>)
 80039f2:	4c0d      	ldr	r4, [pc, #52]	; (8003a28 <__libc_init_array+0x3c>)
 80039f4:	1b64      	subs	r4, r4, r5
 80039f6:	10a4      	asrs	r4, r4, #2
 80039f8:	42a6      	cmp	r6, r4
 80039fa:	d109      	bne.n	8003a10 <__libc_init_array+0x24>
 80039fc:	f000 f81a 	bl	8003a34 <_init>
 8003a00:	2600      	movs	r6, #0
 8003a02:	4d0a      	ldr	r5, [pc, #40]	; (8003a2c <__libc_init_array+0x40>)
 8003a04:	4c0a      	ldr	r4, [pc, #40]	; (8003a30 <__libc_init_array+0x44>)
 8003a06:	1b64      	subs	r4, r4, r5
 8003a08:	10a4      	asrs	r4, r4, #2
 8003a0a:	42a6      	cmp	r6, r4
 8003a0c:	d105      	bne.n	8003a1a <__libc_init_array+0x2e>
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a14:	4798      	blx	r3
 8003a16:	3601      	adds	r6, #1
 8003a18:	e7ee      	b.n	80039f8 <__libc_init_array+0xc>
 8003a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1e:	4798      	blx	r3
 8003a20:	3601      	adds	r6, #1
 8003a22:	e7f2      	b.n	8003a0a <__libc_init_array+0x1e>
 8003a24:	08003aa8 	.word	0x08003aa8
 8003a28:	08003aa8 	.word	0x08003aa8
 8003a2c:	08003aa8 	.word	0x08003aa8
 8003a30:	08003aac 	.word	0x08003aac

08003a34 <_init>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr

08003a40 <_fini>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr
